<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
        <!-- DI和IOC扫描各个层的类 -->
        <context:component-scan base-package="cn.itcast.zjw"></context:component-scan>
	<!-- 读取(加载)数据库连接的配置参数 -->
	<context:property-placeholder
		location="classpath:mybatis/mylocalhostdb.properties" />
	<!-- 配置数据源,使用的是C3P0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 连接池四个基本配置 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!-- 指定连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
	</bean>
	<!-- SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的全局配置文件,这里可以直接不用再写classpath: 在和springMvc进行整合的时候,classpath:不能省略 -->
		<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml" />
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- mapper的扫描器,在这里面配置完成之后,在Mybatis的SqlMapConfig中就不必再进行配置了 同时mapper接口,和mapper.xml也需要名称一样并且在一个目录下; 
		所生成bean的名字就是mapper接口的首字母小写即可; -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描包路径,如果需要扫描多个包,中间是使用半角逗号来隔开, -->
		<property name="basePackage" value="cn.itcast.zjw.dao.mapper" />
		<!-- 使用mapper代理配置SqlSessionFactory时候这里需要特别注意 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 使用JdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 配置Hibernate的SessionFactory -->
	<!-- <bean id="sessionFactory" calss=""></bean> -->
	<!-- 引入事务配置,这里使用的直接是相对路径了 -->
	<import resource="applicationContext-transaction.xml"/>
	<import resource="applicationContext-properties.xml"/>
	<import resource="applicationContext-quartz.xml"/>
	<!-- <import resource="applicationContext-transaction.xml"/> <import resource="applicationContext-service.xml"/> -->
	<!-- <import resource="spring/applicationContext-service.xml"/> <import 
		resource="spring/applicationContext-transaction.xml"/> <import resource="spring/springmvc.xml"/> -->
</beans>