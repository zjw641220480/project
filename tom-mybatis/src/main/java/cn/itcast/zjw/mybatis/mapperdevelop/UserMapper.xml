<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间,作用就是对sql进行分类化管理,理解sql隔离 注意:
如果后期使用mapper代理进行开发,namespace就有了特殊重要的意义,namespace等于所对应mapper接口的权限路径名; -->
<mapper namespace="cn.itcast.zjw.mybatis.mapperdevelop.UserMapper">
	<!-- 开启本mapper的namespace下的二级缓存;
		type:指定cache接口的实现类类型,mybatis默认使用PerpetualCache;
		要和ehcache进行整合,需要配置type为实现mybatis自身cache接口的实现类(ehcache框架中所实现的接口类);
	-->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache" flushInterval="30"/>
<!-- #############################用户信息综合查询findUserList############################################### -->
	<!-- 定义sql代码块 id:sql片段的唯一标识;
	  经验:是基于单表来定义sql片段,这样的话,这个sql片段的可重用性才高;
	  在sql片段中不要包含where -->
	<sql id="query_user_where">
		<if test="userCustomer!=null">
			<if test="userCustomer.sex!=null and userCustomer.sex!=''">
				and user.sex=#{userCustomer.sex}
			</if>
			<if test="userCustomer.username!=null and userCustomer.username!=''">
				and user.username like '%${userCustomer.username}%'
			</if>
		</if>
		<if test="ids!=null">
			<!-- 使用foreach来遍历传入的ids 
				collection:指定输入对象中集合属性,pojo中的属性名;
				item:每次遍历生成的对象名;
				open:开始便利时候拼接的串;
				close:结束遍历时候拼接的串;
				sepertor:遍历的两个对象中间需要拼接的串;
			-->
			<!-- select * from user where 1=1  and (id =1 or id=2 or id=6 ) and -->
			<!-- 使用下边的sql拼接
				 AND (id=1 OR id=2 OR id=6 OR id=9)
			 -->
			<foreach collection="ids" item="user_id" open="AND (" close=")" separator="OR">
				<!-- 每次遍历需要拼接的串; -->
				id=#{user_id}
			</foreach>
		</if>
		<!-- 实现AND in(1,2,6,9) 的拼接 -->
		<!-- <if test="ids!=null">
			<foreach collection="ids" item="user_id" open="AND id in(" close=")" separator=",">
				#{value}
			</foreach>
		</if> -->
	</sql>
	<!-- 用户信息综合查询 #{userCustomer.sex}:取出包装对象中性别的值; 
		${userCustomer.username}:取出包装对象中用户名称; 
		这里注意下,ognl表达式,这里属性都是pojo中的对象名 
		UserQueryVo中有UserCustomer和List两个属性;
		-->
	<select id="findUserList" parameterType="UserQueryVo"
		resultType="cn.itcast.zjw.mybatis.domain.UserCustomer">
		<!-- 第一种最原始的多条件查询 -->
		<!-- select * from user where user.sex = #{userCustomer.sex} and user.username Like '%${userCustomer.username}%'; -->
		<!-- 第二种方式,使用动态sql来拼接多条件查询,并且是把动态sql写入到sql语句中 -->
		<!-- select * from user
		可以自动的去掉条件中的第一个and
		<where>
			<if test="userCustomer!=null">
				<if test="userCustomer.sex!=null and userCustomer.sex!=''">
					user.sex = #{userCustomer.sex} 
				</if>
				<if test="userCustomer.username!=null and userCustomer.username!=''">
					and user.username = #{userCustomer.username}
				</if>
			</if>
		</where> -->
		<!-- 第三种方式,引入sql片段 -->
		select * from user
		<where>
		<!-- 引用sql片段的id,如果refid指定的id不在本mapper配置文件中,需要加上namespace -->
			<include refid="query_user_where"></include>
		</where>
	</select>
	<!-- ################################findUserListMap############################################ -->
	<!-- 用户信息综合查询总数(也就是分页) 
		parameterType:指定的输入类型和findUserList的是一致的,两个是一对的; 
		resultType="int":指定的输出类型; 
		-->
	<select id="findUserCount" parameterType="UserQueryVo"
		resultType="int">
		select count(*) from user
	</select>
	<!-- ################################findUserListMap############################################ -->
	<!-- parameterType属性可有可无 -->
	<select id="findUserListMap" parameterType="java.util.Map"
		resultType="cn.itcast.zjw.mybatis.domain.UserCustomer">
		select * from user where username=#{name};
	</select>
<!-- ############################################################################ -->
	<!-- 在映射文件中要配置很多的sql语句 -->
	<!-- 通过id查询用户表的记录 -->
	<!-- 通过select来执行数据库查询 id:标识映射文件中的sql,称为statement的id; 将sql语句封装到mapperdStatement对象中,所以将id称为statement的id; 
		#{}表示一个占位符; parameterType指定输入参数的类型,这里指定为int型; 
		id=#{id}:大括号中的id就表示接收输入的参数.参数的名称就是id,如果输入参数是简单类型,#{}中的参数名可以任意,可以是value或者其他名称; 
		resultType:指定sql的输出结果,所映射的java对象select指定resultType表示将单条记录映射成的java对象, 
		这里面包括了两个很重要的:一个是输入的参数类型,一个是输出的参数类型; 
		-->
	<select id="findUserById" parameterType="int"
		resultType="user" >
		SELECT * FROM USER WHERE id=#{value};
	</select>
<!-- ############################################################################ -->
	<!-- 使用resultMap作为输出映射 select id id_,username username_ 
			from user where id=#{value}和user类中的属性做一个映射
		type:ResultMap最终映射的java对象类型,可以使用别名
		id:ResultMap的名称;
		 -->
	<resultMap type="cn.itcast.zjw.mybatis.domain.UserCustomer" id="userResultMap">
		<!-- id:表示查询结果集中的唯一标识,也就是主键;
			 column:查询出来结果集(是数据库中的列名)的唯一标识 
			 property:type所指定的pojo中的属性名 
			  最终resultMap对column和property作一个映射关系; -->
		<id column="id_" property="id" />
		<!-- 对普通列的映射 -->
		<result column="username_" property="username" />
	</resultMap>
	<!-- 使用resultMap进行输出映射 
		resultMap:指定定义的resultMap的id,如果这个resultMap在其他的mapper文件,前边需要加namespace
		 -->
	<select id="findUserByIdResultMap" parameterType="int"
		resultMap="userResultMap">
		select id id_,username username_ from user where id=#{value};
	</select>
<!-- ############################################################################ -->
	<!-- 根据用户名称模糊查询用户信息,可能返回多条; resultType:指定的就是单挑记录所映射的java对象类型,不论查询出来的是单条还是多条; 
		${}:表示拼接sql串,将接收到参数的内容,不加任何的修饰,拼接到sql中; 
		注意:有什么隐患,使用${}拼接sql,可能会引起sql注入; 
		${value}:接收输入参数的内容,如果传入内容是简单类型,${}中只能使用value -->
	<select id="findUserByName" parameterType="java.lang.String"
		resultType="user">
		<!-- 这个是使用占位符进行模糊哦查询时候的sql写法; SELECT * FROM USER WHERE username LIKE #{value}; -->
		SELECT * FROM USER WHERE username LIKE '%${value}%';
	</select>
<!-- ############################################################################ -->
	<!-- 添加用户 parameterType:指定输入的参数类型是pojo(包括用户信息); #{}中指定pojo的属性名,接收到pojo对象的属性值,mybatis也是通过OGNL获取对象的属性值; -->
	<insert id="insetUser" parameterType="user">
		<!-- 这里可以不用写id,因为id是自增的,是有MySql自己进行维护的,这里写了也是没用的 -->
		<!-- 将插入数据的主键返回,返回到user对象中, SELECT LAST_INSERT_ID();得到刚才insert进去记录的主键值,只适用玉自增主键 
			keyProperty:将查询到的主键值设置到parameterType指定对象的那个属性; order:SELECT LAST_INSERT_ID()执行顺序,相对于insert语句来说它的执行顺序; 
			resultType:指定SELECT LAST_INSERT_ID()的返回结果类型; -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT
			LAST_INSERT_ID();
		</selectKey>
		<!-- 使用mysql的uuid生成主键, 执行的过程: 首先通过uuid()得到主键值,将主键值设置到user对象的id属性中, 其次在insert执行的时候,从user对象中取出id属性值; -->
		<!-- <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String"> 
			SELECT UUID(); </selectKey> -->
		<!-- INSERT INTO USER (id,username,birthday,sex,address) VALUE(#{id},#{username},#{birthday},#{sex},#{address}); -->
		INSERT INTO USER (username,birthday,sex,address)
		VALUE(#{username},#{birthday},#{sex},#{address});
	</insert>
	<!-- 删除用户 根据id进行删除用户,需要输入id的值 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		DELETE FROM USER WHERE
		id=#{id};
	</delete>
	<!-- 更新用户 分析: 需要传入用户的id; 需要穿入用户的更新信息; parameterType:指定user对象,包括id和跟新信息,注意:id必须存在. 
		#{id}:从输入对象user中获取id属性值; -->
	<update id="updateUser" parameterType="user">
		UPDATE USER SET
		username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
		WHERE id=#{id};
	</update>
</mapper>