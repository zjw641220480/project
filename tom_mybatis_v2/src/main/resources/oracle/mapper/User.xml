<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.itcast.zjw.mybatis.mapper.UserMapper">
	<!-- 定义resultMap,列名和属性名映射配置; id:mapper.xml中的唯一标示 type:最终要映射的pojo类型; -->
	<resultMap type="cn.itcast.zjw.mybatis.pojo.UserCustomer" id="userCustomerResultMap">
		<!-- id:要映射结果的唯一标识 column:结果集的列名; property:type指定的对象的哪个属性中; -->
		<id column="id_" property="id"></id>
		<result column="username_" property="username"></result>
		<result column="birthday_" property="birthday"></result>
	</resultMap>

	<sql id="query_where_user_sql">
		<!-- 不要将where也抽取到sql片段中,不利于sql片段的共用; -->
		<if test="userCustomer!=null">
			<!-- test中userCustomer.username标识从 UserQueryVo中读取属性值 -->
			<if test="userCustomer.username!=null and userCustomer.username!=''">
				and username like '%${userCustomer.username }%'
			</if>
			<if test="userCustomer.sex !=null and userCustomer.sex != ''">
				and sex = ${userCustomer.sex }
			</if>
		</if>
		<!--
			collection:集合属性名称
			open:开始循环要拼接的串;
			close:结束循环要拼接的串;
			item:每次循环所取到的对象;list中放置的对象;
			separator:每两次循环中间拼接的串;
			and id in (1,2,3)
			and (id =1 or id =2 or id =3)
		 -->
		<!-- 先open,然后内容(内容中有item的值),然后separator然后继续item,最后close -->
		<foreach collection="ids" open="and id in(" item="id" separator="," close=")">
			#{id}
		</foreach>
		<!-- 这种方式有可能是会出问题的;只有这一个查询的时候,其第一个and被添加上去了,导致sql异常,缺失表达式 -->
		<!-- <foreach collection="ids" open="and(" item="id" separator="or" close=")">
			id = #{id}
		</foreach> -->
	</sql>
	<select id="findUserById" parameterType="int"
		resultType="cn.itcast.zjw.mybatis.pojo.User">
		SELECT * FROM USER_S WHERE id=#{id}
	</select>

	<!-- 自定义查询条件查询用户信息 parameterType:指定包装类型; ${userCustomer.username}:userCustomer是UserQueryVo中的属性,通过OGNL获取属性的值; -->
	<select id="findUserList" parameterType="cn.itcast.zjw.mybatis.pojo.UserQueryVo"
		resultType="cn.itcast.zjw.mybatis.pojo.UserCustomer">
		select * from user_s
		<where>
			<!-- 一个sql语句中一个where,所以在sql片段中不要出现where -->
			<!-- 引用sql片段,如果sql片段和引用处在不同的mapper中,那么必须要加上namespace -->
			<include refid="query_where_user_sql"></include>
			<!-- <include refid="其他的sql片段,比如商品查询"></include> -->
		</where>
	</select>

	<!-- 使用resultMap做结果集的映射,如果引用的resultMap的位置和定义resultMap的位置不同,要在引用的地方前面加上namespace -->
	<select id="findUserListResultMap" parameterType="cn.itcast.zjw.mybatis.pojo.UserQueryVo"
		resultMap="userCustomerResultMap">
		select id id_,username username_,birthday birthday_ from
		user_s where
		username like '%${userCustomer.username }%'
	</select>
	<select id="findUserListByIds" parameterType="cn.itcast.zjw.mybatis.pojo.UserQueryVo" resultType="cn.itcast.zjw.mybatis.pojo.UserCustomer">
		select * from user_s 
		<where>
			<include refid="query_where_user_sql"></include>
		</where>
	</select>
</mapper>